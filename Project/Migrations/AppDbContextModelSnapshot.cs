// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Emp_project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Emp_project.Entity.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("Date_Of_Joining")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateofjoining");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("department");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("position");

                    b.HasKey("EmployeeId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("employees", (string)null);

                    b.HasData(
                        new
                        {
                            EmployeeId = 2,
                            Created = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Date_Of_Joining = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "IT",
                            Email = "priyanshika@example.com",
                            FullName = "Priyanshika",
                            IsActive = true,
                            Position = "Developer"
                        });
                });

            modelBuilder.Entity("Emp_project.Entity.ReportStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status_name");

                    b.HasKey("StatusId");

                    b.ToTable("report_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Cancelled"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Pending"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Approved"
                        });
                });

            modelBuilder.Entity("Emp_project.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Created = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            IsActive = true,
                            Password = "admin123",
                            RoleId = 1,
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Created = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "employee1@example.com",
                            IsActive = true,
                            Password = "emp123",
                            RoleId = 2,
                            UserName = "employee1"
                        });
                });

            modelBuilder.Entity("Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("report_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("remarks");

                    b.Property<int?>("ReportStatusStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reviewed_at");

                    b.Property<string>("ReviewerName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reviewer_name");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.HasKey("ReportId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ReportStatusStatusId");

                    b.HasIndex("StatusId");

                    b.ToTable("reports", (string)null);

                    b.HasData(
                        new
                        {
                            ReportId = 1,
                            Content = "This report summarizes the project status and blockers.",
                            CreatedAt = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            Remarks = "The project is on track. No major blockers were encountered.",
                            ReviewedAt = new DateTime(2023, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewerName = "Priyanshika",
                            StatusId = 1,
                            Title = "Project Review"
                        });
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Employee"
                        });
                });

            modelBuilder.Entity("Emp_project.Entity.Employee", b =>
                {
                    b.HasOne("Emp_project.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Emp_project.Entity.User", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Report", b =>
                {
                    b.HasOne("Emp_project.Entity.Employee", "Employee")
                        .WithMany("Reports")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emp_project.Entity.ReportStatus", null)
                        .WithMany("Reports")
                        .HasForeignKey("ReportStatusStatusId");

                    b.HasOne("Emp_project.Entity.ReportStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Emp_project.Entity.Employee", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Emp_project.Entity.ReportStatus", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
